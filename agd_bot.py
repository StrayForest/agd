import logging
import psycopg2
import psycopg2.extras 
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, CallbackContext, MessageHandler, filters

# –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∞–º–æ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º–∞)
MAX_MESSAGE_LENGTH = 4096

# –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
db_params = {
    'host': 'localhost',
    'port': '5432',
    'database': 'agd_db',
    'user': 'postgres',
    'password': '1488'
}

# –∫–ª—é—á–∏ –∫–Ω–æ–ø–æ–∫ —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫—É –ø–æ –ë–î (–∫–æ–ª–æ–Ω–∫–∏ –≤ –ë–î –Ω–∞–∑—ã–≤–∞—é—Ç—Å—è –∏–Ω–∞—á–µ)
COLUMN_TO_DB = {
    "–§–ò–û": "name",
    "–î–æ–∫_–ò–°": "doc_is",
    "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ": "direction",
    "–†–æ–ª—å": "job_position_name",
    "–£—Ä–æ–≤–µ–Ω—å": "level_name",
    "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è": "specialization",
    "Gmail": "gmail",
    "–ö–æ–Ω—Ç.–ø–æ—á—Ç–∞": "contact_email",
    "Git_Email": "git_email",
    "GitHub_–ù–∏–∫": "nick_github",
    "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ1": "portfolio_1",
    "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ2": "portfolio_2",
    "–¢–ì": "telegram",
    "Discord": "discord",
    "–°—Ç—Ä–∞–Ω–∞": "country",
    "–ì–æ—Ä–æ–¥": "city",
    "–î–†": "birthday",
    "CV": "cv",
    "–û—Ç–∫–ª–∏–∫": "referral_source",
    "–ú–µ—Ç–∫–∞": "label",
    "Steam": "steam",
    "–¢–µ–ª–µ—Ñ–æ–Ω": "phone",
    "VK": "vk",
    "LinkedIn": "linkedin",
    "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": "comment",
    "–ü—Ä–æ–µ–∫—Ç—ã": "projects"
}

# –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ–∏—Å–∫–∞ (–±–µ—Ä–µ–º –Ω–∞–∑–∞–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–∑ COLUMN_TO_DB)
COLUMNS = [key.split()[0] for key in COLUMN_TO_DB.keys()]

# –≤—ã–±–æ—Ä SQL –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î –≤ –º–µ–Ω—é –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ (–ø–æ–∏—Å–∫ –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î –∏–ª–∏ –ø–æ —Å–≤—è–∑–∞–Ω–Ω—ã–º)
search_conditions = {
    "–§–ò–û": {"column": "name", "join": False},
    "–†–æ–ª—å": {"column": "job_position_name", "join": True},
    "–û—Ç–¥–µ–ª": {"column": "direction", "join": False},
    "–¢–µ–ª–µ–≥—Ä–∞–º": {"column": "telegram", "join": False},
    "–ü—Ä–æ–µ–∫—Ç": {"column": "project", "join": True} #true –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –≤ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º —Ç–∞–±–ª–∏—Ü–∞–º —á–µ—Ä–µ–∑ JOIN –∑–∞–ø—Ä–æ—Å
}

async def set_commands(update, context):
    bot = context.bot

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –º–µ–Ω—é
    await bot.set_my_commands([
        ("start", "–ù–∞—á–∞—Ç—å"),
        ("info", "–ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–æ–º"),
        ("help", "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
    ])
    await update.message.reply_text("–ö–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
async def button(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    print(query.data)

    actions = {
        'start_search': (show_search_menu, 'search_menu'),
        'settings': (show_settings_menu, 'settings_menu'),
        'back_to_start': (start, 'start'),
        'show_project_selection_menu': (show_project_selection_menu, 'show_project_selection_menu'),
        'edit_search_info': (edit_search_info, 'edit_search_info'),
        'save_columns': (show_settings_menu, 'settings_menu'),
        'back_to_settings': (show_settings_menu, 'settings_menu')
    }

    if query.data in actions:
        func, menu_level = actions[query.data]
        context.user_data['menu_level'] = menu_level

        if query.data == 'show_project_selection_menu':
            try:
                projects = get_projects_from_db()
                context.user_data['projects'] = projects
                await func(update, context, projects)
            except Exception as e:
                await query.answer(text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–µ–∫—Ç–æ–≤.")
                print(f"–û—à–∏–±–∫–∞: {e}")
        else:
            await func(update, context)

    elif query.data.startswith('toggle_column_'):
        col_name = query.data.split('toggle_column_')[1]
        selected_columns = context.user_data.setdefault('selected_columns', set())

        if col_name in selected_columns:
            selected_columns.discard(col_name)
        else:
            selected_columns.add(col_name)

        await edit_search_info(update, context)

    elif query.data == 'select_all':
        context.user_data['selected_columns'] = set(COLUMNS)
        await edit_search_info(update, context)

    elif query.data == 'clear_all':
        context.user_data['selected_columns'] = set()
        await edit_search_info(update, context)

    elif query.data in search_conditions:
        context.user_data['search_type'] = query.data
        await show_search_menu(update, context)

    elif query.data in context.user_data.get('projects', []):
        search_type = '–ü—Ä–æ–µ–∫—Ç'
        await handle_text(update, context, search_type)

# –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
async def start(update: Update, context: CallbackContext):
    context.user_data['awaiting_start'] = True
    context.user_data['awaiting_info'] = False  # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ info
    context.user_data['awaiting_help'] = False  # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ help

    context.user_data['menu_level'] = 'start'
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫" –∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
    keyboard = [
        [InlineKeyboardButton("üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", callback_data='start_search')],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='settings')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.message:
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    elif update.callback_query:
        await update.callback_query.edit_message_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )

async def info(update: Update, context: CallbackContext):
    context.user_data['awaiting_info'] = True
    context.user_data['awaiting_start'] = False  # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ start
    context.user_data['awaiting_help'] = False  # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ help
    context.user_data['menu_level'] = 'info'

    if update.message:
        await update.message.reply_text(
            "–£—Ö, –∫—É—Ä–≤–∞",
        )

async def help(update: Update, context: CallbackContext):
    context.user_data['awaiting_help'] = True
    context.user_data['awaiting_start'] = False  # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ start
    context.user_data['awaiting_info'] = False  # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ info

    context.user_data['menu_level'] = 'help'

    if update.message:
        await update.message.reply_text(
            "–ß–µ —Ç—ã—á–µ—à—å???!!",
        )

# –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
async def show_settings_menu(update: Update, context: CallbackContext):
    context.user_data['menu_level'] = 'settings'

    # –ö–Ω–æ–ø–∫–∞ "–§–∏–ª—å—Ç—Ä –≤—ã–¥–∞—á–∏" –∏ "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
    keyboard = [
        [InlineKeyboardButton("–§–∏–ª—å—Ç—Ä –≤—ã–¥–∞—á–∏", callback_data='edit_search_info')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_start')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=reply_markup
    )

# –≤—ã–±–æ—Ä –≤—ã–¥–∞—á–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—ã–¥–∞–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –§–ò–û, —Ç–≥, –ø—Ä–æ–∫–µ—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞)
async def edit_search_info(update: Update, context: CallbackContext):
    context.user_data['menu_level'] = 'edit_search_info'

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    selected_columns = context.user_data.get('selected_columns', set())

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []
    row = []

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ" –∏ "–°–±—Ä–æ—Å" –≤ –Ω–∞—á–∞–ª–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard.append([
        InlineKeyboardButton("‚úîÔ∏è –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", callback_data='select_all'),
        InlineKeyboardButton("‚ùå –°–±—Ä–æ—Å", callback_data='clear_all')
    ])

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
    for idx, col in enumerate(COLUMNS):
        # –û—Ç–º–µ—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≥–∞–ª–æ—á–∫–æ–π
        label = f"‚úÖ {col}" if col in selected_columns else col
        row.append(InlineKeyboardButton(label, callback_data=f'toggle_column_{col}'))

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ —á–µ—Ç—ã—Ä–µ –≤ —Ä—è–¥
        if (idx + 1) % 4 == 0:
            keyboard.append(row)
            row = []

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –∏—Ö –º–µ–Ω—å—à–µ —á–µ—Ç—ã—Ä–µ—Ö
    if row:
        keyboard.append(row)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" –∏ "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    keyboard.append([InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data='save_columns')])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_settings')])

    # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await update.callback_query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å:",
        reply_markup=reply_markup
    )

# –≤—ã–±–æ—Ä –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä –ø–æ–∏—Å–∫ –ø–æ –§–ò–û, —Ç–≥ –∏–ª–∏ –ø—Ä–æ–µ–∫—Ç—É
async def show_search_menu(update: Update, context: CallbackContext):
    context.user_data['menu_level'] = 'search_menu'

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –ø–æ–∏—Å–∫–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    selected_search_type = context.user_data.get('search_type')

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º/—É–¥–∞–ª–µ–Ω–∏–µ–º –≥–∞–ª–æ—á–∫–∏
    keyboard = []
    for search_type in search_conditions.keys():
        label = search_type
        if selected_search_type == search_type:
            label = f"‚úÖ {search_type}"  # –î–æ–±–∞–≤–ª—è–µ–º –≥–∞–ª–æ—á–∫—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞
        # –ï—Å–ª–∏ –∫–ª—é—á "–ü—Ä–æ–µ–∫—Ç", —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –≤—ã–ø–∞–¥—é—â–∏–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
        if search_type == "–ü—Ä–æ–µ–∫—Ç":
            keyboard.append([InlineKeyboardButton(label, callback_data='show_project_selection_menu')])
        else:
            keyboard.append([InlineKeyboardButton(label, callback_data=search_type)])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_start')])

    reply_markup = InlineKeyboardMarkup(keyboard)
    new_text = "–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ –∫–∞–∫–æ–º—É –ø–∞—Ä–∞–º–µ—Ç—Ä—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫:"

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ä–∞–∑–º–µ—Ç–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    current_message_text = update.callback_query.message.text
    current_markup_keyboard = update.callback_query.message.reply_markup.inline_keyboard if update.callback_query.message.reply_markup else []

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—É—â—É—é –∏ –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ —Å–ø–∏—Å–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è, —É—á–∏—Ç—ã–≤–∞—è –∏ —Ç–µ–∫—Å—Ç, –∏ callback_data
    new_keyboard_layout = [[(button.text, button.callback_data) for button in row] for row in keyboard]
    current_keyboard_layout = [[(button.text, button.callback_data) for button in row] for row in current_markup_keyboard]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ä–∞–∑–º–µ—Ç–∫–∞ –æ—Ç —Ç–µ–∫—É—â–∏—Ö
    if current_message_text != new_text or current_keyboard_layout != new_keyboard_layout:
        await update.callback_query.edit_message_text(
            text=new_text,
            reply_markup=reply_markup
        )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞
    for search_type in search_conditions.keys():
        if selected_search_type == search_type:
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context.user_data['search_type'] = search_type

# –ø–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ –ë–î
def get_projects_from_db():
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        with psycopg2.connect(**db_params) as connection:
            with connection.cursor(cursor_factory=psycopg2.extras.DictCursor) as cursor:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã projects
                cursor.execute("SELECT project_name FROM projects")
                projects = cursor.fetchall()

                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–æ–µ–∫—Ç–æ–≤
                return [project['project_name'] for project in projects]

    except psycopg2.Error as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –∏–ª–∏ –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        return []

    # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å, –º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é, –Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ with –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –µ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏–µ.

# —Å–æ–∑–¥–∞–µ–º –º–µ–Ω—é —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
async def show_project_selection_menu(update: Update, context: CallbackContext, projects: list):
    context.user_data['menu_level'] = 'show_project_selection_menu'

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    keyboard = [
        [InlineKeyboardButton(project, callback_data=project)]  # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ —Å –∏–º–µ–Ω–µ–º –ø—Ä–æ–µ–∫—Ç–∞
        for project in projects
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='start_search')])

    reply_markup = InlineKeyboardMarkup(keyboard)
    new_text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞:"

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –µ–≥–æ –æ–±–Ω–æ–≤–∏—Ç—å
    current_message = update.callback_query.message
    current_keyboard = current_message.reply_markup.inline_keyboard if current_message.reply_markup else []

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—É—â—É—é –∏ –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –ø—Ä–æ—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (—Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫ –∏ callback_data)
    new_keyboard_layout = [[button.text for button in row] for row in keyboard]
    current_keyboard_layout = [[button.text for button in row] for row in current_keyboard]

    if current_message.text != new_text or new_keyboard_layout != current_keyboard_layout:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        await update.callback_query.edit_message_text(
            text=new_text,
            reply_markup=reply_markup
        )

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ (–ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞)
async def handle_text(update: Update, context: CallbackContext, search_type: str = None):
        
    if context.user_data.get('awaiting_start', False):
        # –ï—Å–ª–∏ search_type –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å –µ–≥–æ –∏–∑ context.user_data
        search_type = search_type or context.user_data.get('search_type')

        if not search_type:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.")
            return

        # –ï—Å–ª–∏ search_type —ç—Ç–æ "–ü—Ä–æ–µ–∫—Ç", —Ç–æ –º—ã –±–µ—Ä–µ–º query –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏ (query.data)
        if search_type == "–ü—Ä–æ–µ–∫—Ç":
            query = update.callback_query.data  # query.data —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
        else:
            query = update.message.text  # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ "–ü—Ä–æ–µ–∫—Ç", —Ç–æ —Ç–µ–∫—Å—Ç –≤—Å–µ-—Ç–∞–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        selected_columns = context.user_data.get('selected_columns', COLUMNS)  # –í—Å–µ —Å—Ç–æ–ª–±—Ü—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        result = search_contact_info(query, search_type)

        # –ï—Å–ª–∏ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
        if isinstance(result, list):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî —ç—Ç–æ —Å–ø–∏—Å–æ–∫
            await send_individual_results(update, result, selected_columns)
        else:
            # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            await update.message.reply_text(result)
            
    await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥: /start, /info –∏–ª–∏ /help.")

# –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –ë–î –ø–æ –∑–∞–ø—Ä–æ—Å—É
def search_contact_info(query: str, search_type: str):
    try:
        logging.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query} –¥–ª—è —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞: {search_type}")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        with psycopg2.connect(**db_params) as conn:
            with conn.cursor(cursor_factory=psycopg2.extras.DictCursor) as cursor:

                search_info = search_conditions.get(search_type)
                if not search_info:
                    logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–∏—Å–∫–∞: {search_type}")
                    return f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–∏—Å–∫–∞: {search_type}"

                if search_info['join']:
                    # –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ JOIN
                    query_string, like_query = build_join_query(search_type, query)
                else:
                    # –û–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ —Å—Ç–æ–ª–±—Ü—É
                    query_string, like_query = build_simple_query(search_info['column'], query)

                logging.info(f"–ò—Å–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å: {query_string} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {like_query}")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
                cursor.execute(query_string, (like_query,))
                contact_ids = cursor.fetchall()

                logging.info(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ contact_id –∏–∑ –±–∞–∑—ã: {contact_ids}")
                
                if contact_ids:
                    formatted_result = []

                    for contact_row in contact_ids:
                        contact_id = contact_row['contact_id']
                        contact_data = get_contact_data(cursor, contact_id)

                        if contact_data:
                            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–∞–∫—Ç —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –∏ —Ä–æ–ª—è–º–∏
                            formatted_result.append(contact_data)

                    logging.info(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {formatted_result}") 
                    return formatted_result
                else:
                    logging.info("–ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                    return "–ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}"
# –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –¥–ª—è def search_contact_info
def build_join_query(search_type, query):
    if search_type == "–ü—Ä–æ–µ–∫—Ç":
        query_string = """
            SELECT c.contact_id, c.name, jp.job_position_name
            FROM contacts c
            LEFT JOIN contact_projects cp ON c.contact_id = cp.contact_id
            LEFT JOIN projects p ON cp.project_id = p.project_id
            LEFT JOIN contact_job_position cjp ON c.contact_id = cjp.contact_id
            LEFT JOIN job_position jp ON cjp.job_position_name = jp.job_position_name
            WHERE p.project_name ILIKE %s
        """
    elif search_type == "–†–æ–ª—å":
        query_string = """
            SELECT c.contact_id, c.name, jp.job_position_name
            FROM contacts c
            LEFT JOIN contact_job_position cjp ON c.contact_id = cjp.contact_id
            LEFT JOIN job_position jp ON cjp.job_position_name = jp.job_position_name
            WHERE jp.job_position_name ILIKE %s
        """
    like_query = f"%{query.strip()}%"
    return query_string, like_query
# –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –¥–ª—è def search_contact_info
def build_simple_query(column_name, query):
    query_string = f"SELECT contact_id FROM contacts WHERE {column_name} ILIKE %s"
    like_query = f"%{query.strip()}%"
    return query_string, like_query
# –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è –¥–ª—è def search_contact_info
def get_contact_data(cursor, contact_id):
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ
    cursor.execute("SELECT * FROM contacts c WHERE c.contact_id = %s", (contact_id,))
    contact_data = cursor.fetchone()

    if contact_data:
        contact = dict(contact_data)

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã
        cursor.execute("""
            SELECT p.project_name
            FROM projects p
            JOIN contact_projects cp ON p.project_id = cp.project_id
            WHERE cp.contact_id = %s
        """, (contact_id,))
        projects = cursor.fetchall()

        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–∏
        cursor.execute("""
            SELECT jp.job_position_name
            FROM job_position jp
            JOIN contact_job_position cjp ON jp.job_position_name = cjp.job_position_name
            WHERE cjp.contact_id = %s
        """, (contact_id,))
        roles = cursor.fetchall()

        contact['projects'] = ', '.join([project['project_name'] for project in projects]) if projects else '–ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤'
        contact['job_position_name'] = ', '.join([role['job_position_name'] for role in roles]) if roles else '–ù–µ—Ç —Ä–æ–ª–µ–π'

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        return format_contact_data(contact)

    return None
    
# —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ, –∑–∞–º–µ–Ω—è—è None/Null... –Ω–∞ "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
def format_contact_data(contact):
    formatted_contact = {}
    
    for display_name, db_column in COLUMN_TO_DB.items():
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ contact –ø–æ —Å—Ç–æ–ª–±—Ü—É db_column –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –≤ formatted_contact
        formatted_contact[display_name] = contact.get(db_column, '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    return formatted_contact

# –≤—ã–¥–∞—á–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö —Å —É—á–µ—Ç–æ–º –≤—ã–¥–∞—á–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
async def send_individual_results(update, result, selected_columns):
    if result:
        all_contact_info = ""  # –ó–¥–µ—Å—å –±—É–¥–µ–º —Å–æ–±–∏—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö

        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
        for row in result:
            contact_info = ""
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logging.info(f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {row}")

            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ COLUMNS –∏ –≤—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ —Ç–µ —Å—Ç–æ–ª–±—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –≤—ã–±—Ä–∞–Ω—ã
            for col in COLUMNS:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º COLUMNS –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞
                if col in selected_columns:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –µ—Å—Ç—å
                    value = row.get(col, '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                    contact_info += f"{col}: {value}\n"

            contact_info += "-----------------------\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ –∫ –æ–±—â–µ–π —Å—Ç—Ä–æ–∫–µ
            all_contact_info += contact_info

        # –¢–µ–ø–µ—Ä—å –¥–µ–ª–∏–º –≤–µ—Å—å —Å–æ–±—Ä–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, —É—á–∏—Ç—ã–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö
        message_parts = split_message(all_contact_info)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
        for part in message_parts:
            # –í —Å–ª—É—á–∞–µ –∫–Ω–æ–ø–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º callback_query
            if update.callback_query:
                await update.callback_query.message.reply_text(part)
            else:
                await update.message.reply_text(part)
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if update.callback_query:
            await update.callback_query.message.reply_text("–ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        else:
            await update.message.reply_text("–ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

# —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –≤—ã–¥–∞–≤–∞–µ–º–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞ N —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–ª—É—á–∞–µ –ø—Ä–µ–≤—ã—à–∞–µ–Ω–∏—è –º–∞–∫—Å. –∫–æ–ª-–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤
# –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ –Ω–µ —Ä–∞–∑–¥–µ–ª—è–µ—Ç—Å—è –Ω–∞ N —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Ü–µ–ª–∏–∫–æ–º
def split_message(message: str):
    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –Ω–µ —Ä–∞–∑–¥–µ–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö.
    parts = []
    while len(message) > MAX_MESSAGE_LENGTH:
        # –ù–∞–π–¥–µ–º –±–ª–∏–∂–∞–π—à—É—é –ø—É–Ω–∫—Ç–∏—Ä–Ω—É—é –æ—Ç–º–µ—Ç–∫—É, —á—Ç–æ–±—ã –Ω–µ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
        split_point = message.rfind("\n-----------------------\n", 0, MAX_MESSAGE_LENGTH)
        if split_point == -1:  # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ—Å—Ç–æ —Ä–∞–∑—Ä–µ–∑–∞–µ–º –ø–æ –¥–ª–∏–Ω–µ
            split_point = MAX_MESSAGE_LENGTH
        parts.append(message[:split_point])
        message = message[split_point:]
    parts.append(message)
    return parts

# –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    # –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    bot_token = '7965334033:AAG51HpKRBK8RmzYBCgqg-Mj7PMPijNL1WM'

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram
    application = Application.builder().token(bot_token).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("info", info))
    application.add_handler(CommandHandler("help", help))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    application.add_handler(CommandHandler("setcommands", set_commands))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
