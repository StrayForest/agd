import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, CallbackContext, MessageHandler, filters
import mysql.connector
import asyncio

logging.basicConfig(
    level=logging.INFO,  # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∞–º–æ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º–∞)
MAX_MESSAGE_LENGTH = 4096

# –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
db_params = {
    'user': 'root',
    'password': '1234',
    'host': 'localhost',  # –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ö–æ—Å—Ç, –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–Ω—ã–π
    'database': 'agd_db'
}

# –∫–ª—é—á–∏ –∫–Ω–æ–ø–æ–∫ —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫—É –ø–æ –ë–î (–∫–æ–ª–æ–Ω–∫–∏ –≤ –ë–î –Ω–∞–∑—ã–≤–∞—é—Ç—Å—è –∏–Ω–∞—á–µ)
COLUMN_TO_DB = {
    "–§–ò–û": "name",
    "–î–æ–∫_–ò–°": "doc_is",
    "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ": "direction",
    "–†–æ–ª—å": "job_position_name",
    "–£—Ä–æ–≤–µ–Ω—å": "level_name",
    "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è": "specialization",
    "Gmail": "gmail",
    "–ö–æ–Ω—Ç.–ø–æ—á—Ç–∞": "contact_email",
    "Git_Email": "git_email",
    "GitHub_–ù–∏–∫": "nick_github",
    "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ1": "portfolio_1",
    "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ2": "portfolio_2",
    "–¢–ì": "telegram",
    "Discord": "discord",
    "–°—Ç—Ä–∞–Ω–∞": "country",
    "–ì–æ—Ä–æ–¥": "city",
    "–î–†": "birthday",
    "CV": "cv",
    "–û—Ç–∫–ª–∏–∫": "referral_source",
    "–ú–µ—Ç–∫–∞": "label",
    "Steam": "steam",
    "–¢–µ–ª–µ—Ñ–æ–Ω": "phone",
    "VK": "vk",
    "LinkedIn": "linkedin",
    "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": "comment",
    "–ü—Ä–æ–µ–∫—Ç—ã": "projects"
}

# –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ–∏—Å–∫–∞ (–±–µ—Ä–µ–º –Ω–∞–∑–∞–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–∑ COLUMN_TO_DB)
COLUMNS = [key.split()[0] for key in COLUMN_TO_DB.keys()]

# –≤—ã–±–æ—Ä SQL –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î –≤ –º–µ–Ω—é –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ (–ø–æ–∏—Å–∫ –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î –∏–ª–∏ –ø–æ —Å–≤—è–∑–∞–Ω–Ω—ã–º)
search_conditions = {
    "–§–ò–û": {"column": "name", "join": False},
    "–†–æ–ª—å": {"column": "job_position_name", "join": True}, #true –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –≤ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º —Ç–∞–±–ª–∏—Ü–∞–º —á–µ—Ä–µ–∑ JOIN –∑–∞–ø—Ä–æ—Å
    "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ": {"column": "direction", "join": False},
    "–¢–µ–ª–µ–≥—Ä–∞–º": {"column": "telegram", "join": False},
    "–ü—Ä–æ–µ–∫—Ç": {"column": "project", "join": True} #true –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –≤ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º —Ç–∞–±–ª–∏—Ü–∞–º —á–µ—Ä–µ–∑ JOIN –∑–∞–ø—Ä–æ—Å
}

async def set_commands(update, context):
    bot = context.bot

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –º–µ–Ω—é
    await bot.set_my_commands([
        ("start", "–ù–∞—á–∞—Ç—å"),
        ("help", "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
    ])
    await update.message.reply_text("–ö–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
async def button(update: Update, context: CallbackContext):
    query = update.callback_query
    logger.info("Received callback query with data: %s", query.data)

    await query.answer()

    actions = {
        'start_search': (show_search_menu, 'search_menu'),
        'settings': (show_settings_menu, 'settings_menu'),
        'back_to_start': (start, 'start'),
        'show_project_selection_menu': (show_project_selection_menu, 'show_project_selection_menu'),
        'edit_search_info': (edit_search_info, 'edit_search_info'),
        'save_columns': (show_settings_menu, 'settings_menu'),
        'back_to_settings': (show_settings_menu, 'settings_menu')
    }

    if query.data in actions:
        func, menu_level = actions[query.data]
        context.user_data['menu_level'] = menu_level
        logger.info("Action matched: %s, setting menu_level to %s", query.data, menu_level)

        if query.data == 'show_project_selection_menu':
            try:
                logger.info("Loading projects from database")
                projects = get_projects_from_db()
                context.user_data['projects'] = projects
                await func(update, context, projects)
                logger.info("Projects loaded successfully: %s", projects)
            except Exception as e:
                logger.error("Error loading projects: %s", e, exc_info=True)
                await query.answer(text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–µ–∫—Ç–æ–≤.")
        else:
            await func(update, context)
            logger.info("Executed function: %s", func.__name__)

    elif query.data.startswith('toggle_column_'):
        col_name = query.data.split('toggle_column_')[1]
        selected_columns = context.user_data.setdefault('selected_columns', set())
        logger.info("Toggling column: %s", col_name)

        if col_name in selected_columns:
            selected_columns.discard(col_name)
            logger.info("Column %s removed from selected_columns", col_name)
        else:
            selected_columns.add(col_name)
            logger.info("Column %s added to selected_columns", col_name)

        await edit_search_info(update, context)

    elif query.data == 'select_all':
        logger.info("Selecting all columns")
        context.user_data['selected_columns'] = set(COLUMNS)
        await edit_search_info(update, context)

    elif query.data == 'clear_all':
        logger.info("Clearing all selected columns")
        context.user_data['selected_columns'] = set()
        await edit_search_info(update, context)

    elif query.data in search_conditions:
        logger.info("Setting search_type to: %s", query.data)
        context.user_data['search_type'] = query.data
        await show_search_menu(update, context)

    elif query.data in context.user_data.get('projects', []):
        search_type = '–ü—Ä–æ–µ–∫—Ç'
        logger.info("Selected project: %s, search_type set to %s", query.data, search_type)
        await handle_start(update, context, search_type)

# –∫–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: CallbackContext):
    logger.info("Function `start` called with user: %s", update.effective_user.username)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ user_data
    context.user_data['menu_level'] = 'start'
    context.user_data['start'] = True
    context.user_data['help'] = False
    logger.debug("User data initialized: %s", context.user_data)

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫" –∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
    keyboard = [
        [InlineKeyboardButton("üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", callback_data='start_search')],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='settings')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    logger.debug("Reply markup created with buttons: %s", keyboard)

    try:
        if update.message:
            logger.info("Sending welcome message to user via `update.message`")
            await update.message.reply_text(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
        elif update.callback_query:
            logger.info("Editing message text via `update.callback_query`")
            await update.callback_query.edit_message_text(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
        else:
            logger.warning("Neither `update.message` nor `update.callback_query` present in the update")
    except Exception as e:
        logger.error("Error in `start` function: %s", e, exc_info=True)
async def help(update: Update, context: CallbackContext):
    logger.info("Function `help` called with user: %s", update.effective_user.username)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ user_data
    context.user_data['menu_level'] = 'help'
    context.user_data['help'] = True
    context.user_data['start'] = False
    logger.debug("User data updated: %s", context.user_data)

    try:
        if update.message:
            logger.info("Sending help message to user via `update.message`")
            await update.message.reply_text(
                "üëã <b>–ü—Ä–∏–≤–µ—Ç</b>, —è AGD - –±–æ—Ç.\n\n"
                "–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö üë®‚Äçüíª\n\n"
                "–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞ –≤—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É <b>/start</b>\n\n"
                "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –Ω–∞ ‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> -> <b>–§–∏–ª—å—Ç—Ä –≤—ã–¥–∞—á–∏</b>.\n"
                "–¢–∞–º –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞—Ç—å, –∫–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å.\n\n"
                "–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å <b>–≤—Å–µ</b> —Å—Ç–æ–ª–±—Ü—ã –∏–ª–∏ <b>–Ω–µ—Å–∫–æ–ª—å–∫–æ</b>.\n"
                "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–∂–º–∏ <b>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å!</b> üíæ\n\n"
                "–ó–∞—Ç–µ–º –≤–µ—Ä–Ω–∏—Ç—å –∏ –Ω–∞–∂–º–∏ üîç <b>–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫</b>.\n\n"
                "–°–¥–µ—Å—å –≤—ã–±–∏—Ä–∞–µ—à—å, —á–µ—Ä–µ–∑ —á—Ç–æ —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –≤—ã–±—Ä–∞—Ç—å <b>–§–ò–û</b> –∏ –≤–≤–µ—Å—Ç–∏ <b>–ù–∏–∫–∏—Ç–∞</b>, —Ç–æ –≤—ã–¥–∞—Å—Ç <b>–≤—Å–µ—Ö –ù–∏–∫–∏—Ç</b>.\n\n"
                "–ù–∞–∂–∞–≤ –Ω–∞ <b>–ü—Ä–æ–µ–∫—Ç</b>, –ø–æ—è–≤–∏—Ç—Å—è —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–µ –ø—Ä–æ–ø–∏—Å—ã–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –≤—Ä—É—á–Ω—É—é.",
                parse_mode='HTML'
            )
        else:
            logger.warning("No `update.message` found in the update")
    except Exception as e:
        logger.error("Error in `help` function: %s", e, exc_info=True)

# –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
async def show_settings_menu(update: Update, context: CallbackContext):
    logger.info("Function `show_settings_menu` called with user: %s", update.effective_user.username)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –º–µ–Ω—é –≤ user_data
    context.user_data['menu_level'] = 'settings'
    logger.debug("User data updated: %s", context.user_data)

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    keyboard = [
        [InlineKeyboardButton("–§–∏–ª—å—Ç—Ä –≤—ã–¥–∞—á–∏", callback_data='edit_search_info')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_start')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    logger.debug("Reply markup created with buttons: %s", keyboard)

    try:
        await update.callback_query.edit_message_text(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:",
            reply_markup=reply_markup
        )
        logger.info("Settings menu displayed successfully")
    except Exception as e:
        logger.error("Error displaying settings menu: %s", e, exc_info=True)

# –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –≤—ã–¥–∞—á–∏
async def edit_search_info(update: Update, context: CallbackContext):
    context.user_data['menu_level'] = 'edit_search_info'
    logger.info(f"edit_search_info called for user {update.effective_user.username}")

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    selected_columns = context.user_data.get('selected_columns', set())
    logger.info(f"Selected columns: {selected_columns}")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []
    row = []

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ" –∏ "–°–±—Ä–æ—Å" –≤ –Ω–∞—á–∞–ª–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard.append([
        InlineKeyboardButton("‚úîÔ∏è –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", callback_data='select_all'),
        InlineKeyboardButton("‚ùå –°–±—Ä–æ—Å", callback_data='clear_all')
    ])
    logger.info("Added '–í—ã–±—Ä–∞—Ç—å –≤—Å–µ' and '–°–±—Ä–æ—Å' buttons to keyboard")

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
    for idx, col in enumerate(COLUMNS):
        # –û—Ç–º–µ—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≥–∞–ª–æ—á–∫–æ–π
        label = f"‚úÖ {col}" if col in selected_columns else col
        row.append(InlineKeyboardButton(label, callback_data=f'toggle_column_{col}'))

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ —á–µ—Ç—ã—Ä–µ –≤ —Ä—è–¥
        if (idx + 1) % 4 == 0:
            keyboard.append(row)
            logger.info(f"Added row of buttons for columns {row}")
            row = []

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –∏—Ö –º–µ–Ω—å—à–µ —á–µ—Ç—ã—Ä–µ—Ö
    if row:
        keyboard.append(row)
        logger.info(f"Added final row of buttons for columns {row}")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" –∏ "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    keyboard.append([InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data='save_columns')])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_settings')])

    logger.info("Added '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' and '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' buttons to keyboard")

    # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    reply_markup = InlineKeyboardMarkup(keyboard)
    logger.info("Created reply_markup for the keyboard")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    try:
        await update.callback_query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å:",
            reply_markup=reply_markup
        )
        logger.info("Successfully updated message with new keyboard")
    except Exception as e:
        logger.error(f"Error updating message: {e}")

# –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä –ø–æ–∏—Å–∫ –ø–æ –§–ò–û, —Ç–≥ –∏–ª–∏ –ø—Ä–æ–µ–∫—Ç—É
async def show_search_menu(update: Update, context: CallbackContext):
    logger.info("Function `show_search_menu` called with user: %s", update.effective_user.username)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –º–µ–Ω—é –≤ user_data
    context.user_data['menu_level'] = 'search_menu'
    logger.debug("User data updated: %s", context.user_data)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –ø–æ–∏—Å–∫–∞
    selected_search_type = context.user_data.get('search_type')
    logger.debug("Selected search type: %s", selected_search_type)

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞
    keyboard = []
    for search_type in search_conditions.keys():
        label = search_type
        if selected_search_type == search_type:
            label = f"‚úÖ {search_type}"  # –î–æ–±–∞–≤–ª—è–µ–º –≥–∞–ª–æ—á–∫—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞

        if search_type == "–ü—Ä–æ–µ–∫—Ç":
            keyboard.append([InlineKeyboardButton(label, callback_data='show_project_selection_menu')])
        else:
            keyboard.append([InlineKeyboardButton(label, callback_data=search_type)])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_start')])

    reply_markup = InlineKeyboardMarkup(keyboard)
    new_text = "–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ –∫–∞–∫–æ–º—É –ø–∞—Ä–∞–º–µ—Ç—Ä—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫:"
    logger.debug("New keyboard layout prepared: %s", keyboard)

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ä–∞–∑–º–µ—Ç–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        current_message_text = update.callback_query.message.text
        current_markup_keyboard = update.callback_query.message.reply_markup.inline_keyboard if update.callback_query.message.reply_markup else []

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—É—â—É—é –∏ –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ —Å–ø–∏—Å–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        new_keyboard_layout = [[(button.text, button.callback_data) for button in row] for row in keyboard]
        current_keyboard_layout = [[(button.text, button.callback_data) for button in row] for row in current_markup_keyboard]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ä–∞–∑–º–µ—Ç–∫–∞ –æ—Ç —Ç–µ–∫—É—â–∏—Ö
        if current_message_text != new_text or current_keyboard_layout != new_keyboard_layout:
            await update.callback_query.edit_message_text(
                text=new_text,
                reply_markup=reply_markup
            )
            logger.info("Search menu updated with new text and layout")
        else:
            logger.info("No changes detected in search menu; update skipped")
    except Exception as e:
        logger.error("Error updating search menu: %s", e, exc_info=True)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞
    for search_type in search_conditions.keys():
        if selected_search_type == search_type:
            context.user_data['search_type'] = search_type
            logger.debug("Search type saved to user data: %s", search_type)

# –ø–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ –ë–î
def get_projects_from_db():
    logger.info("Function `get_projects_from_db` called")

    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        with mysql.connector.connect(**db_params) as connection:
            with connection.cursor(dictionary=True) as cursor:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã projects
                cursor.execute("SELECT project_name FROM projects")
                projects = cursor.fetchall()
                logger.info("Projects successfully fetched from database")

                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –ø—Ä–æ–µ–∫—Ç–æ–≤
                project_list = [project['project_name'] for project in projects]
                logger.debug("Fetched projects: %s", project_list)
                return project_list

    except mysql.connector.Error as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        logger.error("Database error in `get_projects_from_db`: %s", e, exc_info=True)
        return []

    except Exception as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –æ—à–∏–±–∫–∏
        logger.error("Unexpected error in `get_projects_from_db`: %s", e, exc_info=True)
        return []

# —Å–æ–∑–¥–∞–µ–º –≤—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
async def show_project_selection_menu(update: Update, context: CallbackContext, projects: list):
    logger.info("Function `show_project_selection_menu` called with user: %s", update.effective_user.username)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –º–µ–Ω—é –≤ user_data
    context.user_data['menu_level'] = 'show_project_selection_menu'
    logger.debug("User data updated: %s", context.user_data)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    keyboard = [
        [InlineKeyboardButton(project, callback_data=project)]  # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ —Å –∏–º–µ–Ω–µ–º –ø—Ä–æ–µ–∫—Ç–∞
        for project in projects
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='start_search')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    new_text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞:"
    logger.debug("Keyboard created with projects: %s", projects)

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –µ–≥–æ –æ–±–Ω–æ–≤–∏—Ç—å
        current_message = update.callback_query.message
        current_keyboard = current_message.reply_markup.inline_keyboard if current_message.reply_markup else []

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—É—â—É—é –∏ –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –ø—Ä–æ—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        new_keyboard_layout = [[button.text for button in row] for row in keyboard]
        current_keyboard_layout = [[button.text for button in row] for row in current_keyboard]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        if current_message.text != new_text or new_keyboard_layout != current_keyboard_layout:
            await update.callback_query.edit_message_text(
                text=new_text,
                reply_markup=reply_markup
            )
            logger.info("Project selection menu updated with new text and layout")
        else:
            logger.info("No changes detected in project selection menu; update skipped")
    except Exception as e:
        logger.error("Error updating project selection menu: %s", e, exc_info=True)

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –∏ –ø–æ–∏—Å–∫–∞ –ø–æ –≤—ã–ø–∞–¥–∞—é—â–∏–º —Å–ø–∏—Å–∫–∞–º (–ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –æ—Ç –∫–æ–º–∞–Ω–¥—ã /start)
async def handle_start(update: Update, context: CallbackContext, search_type: str = None):
    logger.info("Function `handle_start` called with user: %s", update.effective_user.username)

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª–∏ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
        if context.user_data.get('start', False):
            logger.debug("Start mode is active for user: %s", update.effective_user.username)

            # –ï—Å–ª–∏ search_type –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å –µ–≥–æ –∏–∑ context.user_data
            search_type = search_type or context.user_data.get('search_type')
            logger.debug("Search type determined: %s", search_type)

            if not search_type:
                await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.")
                logger.warning("Search type is not selected for user: %s", update.effective_user.username)
                return

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç search_type
            if search_type == "–ü—Ä–æ–µ–∫—Ç":
                query = update.callback_query.data  # query.data —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
                logger.debug("Query determined from callback data: %s", query)
            else:
                query = update.message.text.lower()  # –¢–µ–∫—Å—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                logger.debug("Query determined from user message: %s", query)

            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            selected_columns = context.user_data.get('selected_columns', COLUMNS)
            logger.debug("Selected columns: %s", selected_columns)

            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            result = search_contact_info(query, search_type)
            logger.info("Search performed with query: %s, type: %s", query, search_type)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
            if isinstance(result, list):
                await send_individual_results(update, result, selected_columns)
                logger.info("Results sent to user: %s", update.effective_user.username)
            else:
                await update.message.reply_text(result)
                logger.warning("No results found for query: %s, type: %s", query, search_type)
        else:
            logger.warning("Start mode is inactive for user: %s", update.effective_user.username)
    except Exception as e:
        logger.error("Error in `handle_start` for user: %s, error: %s", update.effective_user.username, e, exc_info=True)

# –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –ë–î –ø–æ –∑–∞–ø—Ä–æ—Å—É
def search_contact_info(query: str, search_type: str):
    logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query} –¥–ª—è —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞: {search_type}")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        with mysql.connector.connect(**db_params) as conn:
            with conn.cursor(dictionary=True) as cursor:
                
                search_info = search_conditions.get(search_type)
                if not search_info:
                    logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–∏—Å–∫–∞: {search_type}")
                    return f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–∏—Å–∫–∞: {search_type}"

                # –°—Ç—Ä–æ–∏–º –∑–∞–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞
                if search_info['join']:
                    query_string, like_query = build_join_query(search_type, query)
                    logger.debug("–°—Ç—Ä–æ–∏–º JOIN –∑–∞–ø—Ä–æ—Å: %s —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: %s", query_string, like_query)
                else:
                    query_string, like_query = build_simple_query(search_info['column'], query)
                    logger.debug("–°—Ç—Ä–æ–∏–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å: %s —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: %s", query_string, like_query)

                # –ò—Å–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
                logger.info("–ò—Å–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å: %s —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: %s", query_string, like_query)
                cursor.execute(query_string, (like_query,))
                contact_ids = cursor.fetchall()

                # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ contact_id –∏–∑ –±–∞–∑—ã: {contact_ids}")

                if contact_ids:
                    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ contact_id –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
                    contact_ids_list = [contact['contact_id'] for contact in contact_ids]

                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
                    formatted_result = get_contacts_data(cursor, contact_ids_list)

                    if formatted_result:
                        logger.info(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {formatted_result}")
                        return formatted_result
                    else:
                        logger.info("–ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                        return "–ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
                else:
                    logger.info("–ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                    return "–ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

    except mysql.connector.Error as db_error:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {db_error}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–∞–Ω–Ω—ã—Ö: {db_error}"
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}", exc_info=True)
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}"

# join –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–≤—è–∑—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ —Å–≤—è–∑—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–∏—Å–∫ –ø–æ –ü—Ä–æ–µ–∫—Ç—É)
def build_join_query(search_type, query):
    logger.info(f"–°—Ç—Ä–æ–∏–º JOIN –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞: {search_type} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º: {query}")
    
    if search_type == "–ü—Ä–æ–µ–∫—Ç":
        query_string = """
            SELECT c.contact_id, c.name, jp.job_position_name
            FROM contacts c
            LEFT JOIN contact_projects cp ON c.contact_id = cp.contact_id
            LEFT JOIN projects p ON cp.project_id = p.project_id
            LEFT JOIN contact_job_position cjp ON c.contact_id = cjp.contact_id
            LEFT JOIN job_position jp ON cjp.job_position_name = jp.job_position_name
            WHERE LOWER(p.project_name) LIKE %s
        """
        logger.debug(f"–ó–∞–ø—Ä–æ—Å –¥–ª—è —Ç–∏–ø–∞ '–ü—Ä–æ–µ–∫—Ç': {query_string}")
        
    elif search_type == "–†–æ–ª—å":
        query_string = """
            SELECT c.contact_id, c.name, jp.job_position_name
            FROM contacts c
            LEFT JOIN contact_job_position cjp ON c.contact_id = cjp.contact_id
            LEFT JOIN job_position jp ON cjp.job_position_name = jp.job_position_name
            WHERE LOWER(jp.job_position_name) LIKE %s
        """
        logger.debug(f"–ó–∞–ø—Ä–æ—Å –¥–ª—è —Ç–∏–ø–∞ '–†–æ–ª—å': {query_string}")
    
    else:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–∏—Å–∫–∞: {search_type}")
        raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–∏—Å–∫–∞: {search_type}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –¥–ª—è LIKE-–∑–∞–ø—Ä–æ—Å–∞
    like_query = f"%{query.strip().lower()}%"
    logger.debug(f"LIKE –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {like_query}")

    return query_string, like_query
# –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –ø—Ä–∏ –ø–æ–∏—Å–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–∏—Å–∫ –ø–æ –§–ò–û)
def build_simple_query(column_name, query):
    logger.info(f"–°—Ç—Ä–æ–∏–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞: {column_name} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º: {query}")

    # –°—Ç—Ä–æ–∏–º —Å—Ç—Ä–æ–∫—É –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Å—Ç–æ–ª–±—Ü—É
    query_string = f"SELECT contact_id FROM contacts WHERE LOWER({column_name}) LIKE LOWER(%s)"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –¥–ª—è LIKE-–∑–∞–ø—Ä–æ—Å–∞
    like_query = f"%{query.strip().lower()}%"
    
    logger.debug(f"–ó–∞–ø—Ä–æ—Å: {query_string}")
    logger.debug(f"LIKE –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {like_query}")

    return query_string, like_query

# –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ
def get_contacts_data(cursor, contact_ids):
    logger.info(f"–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å ID: {contact_ids}")

    try:
        # –°—Ç—Ä–æ–∏–º —Å—Ç—Ä–æ–∫—É —Å —É—Å–ª–æ–≤–∏—è–º–∏ IN –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        format_strings = ','.join(['%s'] * len(contact_ids))
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö
        cursor.execute(f"SELECT * FROM contacts c WHERE c.contact_id IN ({format_strings})", tuple(contact_ids))
        contacts_data = cursor.fetchall()

        if not contacts_data:
            logger.warning("–ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return []

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ contact_ids –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ
        contact_data_dict = {contact['contact_id']: contact for contact in contacts_data}
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
        cursor.execute(f"""
            SELECT p.project_name, cp.contact_id
            FROM projects p
            JOIN contact_projects cp ON p.project_id = cp.project_id
            WHERE cp.contact_id IN ({format_strings})
        """, tuple(contact_ids))
        projects = cursor.fetchall()

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç—ã –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º
        contact_projects = {}
        for project in projects:
            contact_projects.setdefault(project['contact_id'], []).append(project['project_name'])
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–∏ –¥–ª—è –≤—Å–µ—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
        cursor.execute(f"""
            SELECT jp.job_position_name, cjp.contact_id
            FROM job_position jp
            JOIN contact_job_position cjp ON jp.job_position_name = cjp.job_position_name
            WHERE cjp.contact_id IN ({format_strings})
        """, tuple(contact_ids))
        roles = cursor.fetchall()

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–æ–ª–∏ –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º
        contact_roles = {}
        for role in roles:
            contact_roles.setdefault(role['contact_id'], []).append(role['job_position_name'])

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –∏ —Ä–æ–ª—è–º–∏
        formatted_contacts = []
        for contact_id, contact in contact_data_dict.items():
            contact['projects'] = ', '.join(contact_projects.get(contact_id, [])) or '–ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤'
            contact['job_position_name'] = ', '.join(contact_roles.get(contact_id, [])) or '–ù–µ—Ç —Ä–æ–ª–µ–π'
            formatted_contact = format_contact_data(contact)
            formatted_contacts.append(formatted_contact)

        logger.debug(f"–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {formatted_contacts}")
        return formatted_contacts

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {e}")
        return []

# —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ, –∑–∞–º–µ–Ω—è—è None/Null –Ω–∞ "–ù–µ —É–∫–∞–∑–∞–Ω–æ" –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã
def format_contact_data(contact):
    formatted_contact = {}

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ª–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ COLUMN_TO_DB
    for display_name, db_column in COLUMN_TO_DB.items():
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–∞–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Ç–∞–∫ –∏ "—á–∏—Å—Ç–æ–µ" –∏–º—è —Å—Ç–æ–ª–±—Ü–∞
        value = contact.get(db_column, '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∏—Ç–æ–≥–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å
        formatted_contact[display_name] = value

        # –ü–æ–¥—Ä–æ–±–Ω—ã–π –ª–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"–û—Ç–æ–±—Ä–∞–∂–∞–µ–º '{display_name}' –∫–∞–∫ '{db_column}': –∑–Ω–∞—á–µ–Ω–∏–µ = '{value}'")

    logger.debug(f"–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {formatted_contact}")
    return formatted_contact

# –≤—ã–¥–∞—á–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö —Å —É—á–µ—Ç–æ–º –≤—ã–¥–∞—á–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
async def send_individual_results(update, result, selected_columns):
    if result:
        all_contact_info = ""  # –ó–¥–µ—Å—å –±—É–¥–µ–º —Å–æ–±–∏—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö

        for row in result:
            contact_info = ""
            logging.info(f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ): {row}")

            for col in COLUMNS:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ —Å—Ç–æ–ª–±—Ü—ã –ø—Ä–∏—Ö–æ–¥—è—Ç, —á—Ç–æ–±—ã –æ—Ç–ª–∞–¥–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö
                logging.info(f"–¢–µ–∫—É—â–∏–π —Å—Ç–æ–ª–±–µ—Ü: {col}")
                
                if col in selected_columns:
                    value = row.get(col, '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
                    contact_info += f"{col}: {value}\n"
                    logging.info(f"–ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ '{col}': {value}")

            contact_info += "-----------------------\n"
            all_contact_info += contact_info

        # –†–∞–∑–±–∏–≤–∞–µ–º –≤–µ—Å—å —Å–æ–±—Ä–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –∏ –≤—ã–≤–æ–¥–∏–º
        message_parts = split_message(all_contact_info)

        for part in message_parts:
            logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {part[:50]}...")  # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

            if update.callback_query:
                await update.callback_query.message.reply_text(part)
            else:
                await update.message.reply_text(part)
    else:
        no_contact_msg = "–ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
        logging.warning(f"–ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {no_contact_msg}")
        
        await (update.callback_query.message.reply_text(no_contact_msg) if update.callback_query else update.message.reply_text(no_contact_msg))

# —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –≤—ã–¥–∞–≤–∞–µ–º–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞ N —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–ª—É—á–∞–µ –ø—Ä–µ–≤—ã—à–∞–µ–Ω–∏—è –º–∞–∫—Å. –∫–æ–ª-–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤
# –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ –Ω–µ —Ä–∞–∑–¥–µ–ª—è–µ—Ç—Å—è –Ω–∞ N —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Ü–µ–ª–∏–∫–æ–º
def split_message(message: str):
    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –Ω–µ —Ä–∞–∑–¥–µ–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö.
    parts = []
    while len(message) > MAX_MESSAGE_LENGTH:
        # –ù–∞–π–¥–µ–º –±–ª–∏–∂–∞–π—à—É—é –ø—É–Ω–∫—Ç–∏—Ä–Ω—É—é –æ—Ç–º–µ—Ç–∫—É, —á—Ç–æ–±—ã –Ω–µ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
        split_point = message.rfind("\n-----------------------\n", 0, MAX_MESSAGE_LENGTH)
        
        if split_point == -1:  # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ—Å—Ç–æ —Ä–∞–∑—Ä–µ–∑–∞–µ–º –ø–æ –¥–ª–∏–Ω–µ
            split_point = MAX_MESSAGE_LENGTH
            logging.warning(f"–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–ª–∏–Ω–µ, —Ç.–∫. –ø—É–Ω–∫—Ç–∏—Ä–Ω–∞—è –æ—Ç–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è = {len(message)}")

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
        parts.append(message[:split_point])
        message = message[split_point:]

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —à–∞–≥–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        logging.info(f"–†–∞–∑–¥–µ–ª–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ {len(parts)} —á–∞—Å—Ç–µ–π. –û—Å—Ç–∞–≤—à–∞—è—Å—è –¥–ª–∏–Ω–∞: {len(message)}")

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
    parts.append(message)
    logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–¥–µ–ª–µ–Ω–æ –Ω–∞ {len(parts)} —á–∞—Å—Ç–µ–π.")
    
    return parts

# –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    # –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
    bot_token = '7965334033:AAG51HpKRBK8RmzYBCgqg-Mj7PMPijNL1WM'

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram
    application = Application.builder().token(bot_token).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_start))

    application.add_handler(CommandHandler("setcommands", set_commands))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
